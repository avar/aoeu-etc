#!/usr/bin/perl -w
#
# xmlrpc based munin plugin for monitoring rtorrent's upload/download speed
# prerequisites:
#  - rtorrent 0.7.5 or newer compiled with --with-xmlrpc-c
# check http://libtorrent.rakshasa.no/wiki/RTorrentXMLRPCGuide for further informations
#
# written by Gabor Hudiczius
# web: http://projects.cyla.homeip.net/rtwi/wiki/rTorrentOMeter
# email: ghudiczius@gmail.com
#
# 0.0.0 - 071218
#  initial release
#
# 0.0.1 - 071220
#  minor textbugs fixed
#
# 0.1.0 - 080519
#  full rewrite in perl
#  support for scgi_port and scgi_local
#  configurable via munin env variables
#  different ul/dl scale can be set for asymmetric connections
#
# obsolete - use "rtom_spdd_" for more accurate graphs
#
#
# Parameters:
#
#	config		required
#
#
# Configurable variables
#
#	src		"socket" when using scgi_socket, or anything else when using scgi_port
#	socket		rTorrent's rpc socket (scgi_local)	- using scgi_local	- needed, when "src" is set to "socket"
#	ip		rTorrent's ip address			- using scgi_port	- needed, when "src" is NOT set to "socket"
#	port		rTorrent's scgi port (scgi_port)	- using scgi_port	- needed, when "src" is NOT set to "socket"
#
#	diff		"yes" for using bps for upload and Bps for download, or anything else for using Bps for both
#
#
# Configuration example
#
#	[rtom_spd]
#	user username
#	env.src socket
#	env.socket /home/user/torrent/.socket/rpc.socket
#
#	[rtom_spd]
#	env.ip 127.0.0.1
#	env.port 5000
#
#
#%# family=auto


if ( $ARGV[0] and $ARGV[0] eq "autoconf" ) {
	exit 1;
}

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
	my $diff = $ENV{"diff"} || "";

	print "graph_order down up\n";
	print "graph_title rTorrent speeds\n";
	print "graph_args --base 1024\n";
	print "graph_vlabel Bytes per \${graph_period}\n";
	print "graph_category rTorrent\n";
	print "down.label Download B/s\n";
	print "down.info Download speed in Bytes per seconds\n";
	print "down.type GAUGE\n";
	print "down.draw AREA\n";
	if ( ( defined $diff ) && ( $diff eq "yes" ) ) {
		print "up.label Upload b/s\n";
		print "up.info Upload speed in bits per seconds\n";
		print "up.cdef up,8,*\n";
	} else {
		print "up.label Upload B/s\n";
		print "up.info Upload speed in Bytes per seconds\n";
	}
	print "up.type GAUGE\n";
	print "up.draw LINE2\n";
	exit 0;
}

use IO::Socket;

my $src 	= $ENV{"src"} || "";
my $ip		= $ENV{"ip"} || "127.0.0.1";
my $port	= $ENV{"port"} || "5000";
my $socket	= $ENV{"socket"} || "";

my $pattern	= qr/<value><(int|i4|i8|ex\.i8)>(\d+)<\/(int|i4|i8|ex\.i8)><\/value>/;

my $line	= "<?xml version=\"1.0\" encoding=\"utf-8\"?><methodCall><methodName>d.multicall</methodName><params><param><value><string>default</string></value></param><param><value><string>d.get_up_rate=</string></value></param><param><value><string>d.get_down_rate=</string></value></param></params></methodCall>";
my $llen	= length $line;
my $header	= "CONTENT_LENGTH\000${llen}\000SCGI\001\000";
my $hlen	= length $header;
$line		= "${hlen}:${header},${line}";

if ( ( defined $src ) && ( $src eq "socket" ) ) {
	socket( SOCK, PF_UNIX, SOCK_STREAM, 0 );
	connect( SOCK, sockaddr_un( $socket ) );
} else {
	socket( SOCK, PF_INET, SOCK_STREAM, getprotobyname( "tcp" ) );
	connect( SOCK, sockaddr_in( $port, inet_aton( $ip ) ) );
}

print SOCK $line;
flush SOCK;

my $up = 0;
my $down = 0;
while ( $line = <SOCK> ) {
	if ( $line =~ /$pattern/ ) {
		$up += $2;
		$line = <SOCK>;
		if ( $line =~ /$pattern/ ) {
			$down += $2;
		}
	}
	
}
close (SOCK);

print "up.value ${up}\ndown.value ${down}\n";

exit;
